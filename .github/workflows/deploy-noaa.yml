name: Deploy NOAA

on:
  workflow_dispatch:
  push:
    branches: [ main, dev, production ]
  pull_request:
    branches: [ main, dev, production ]

jobs:
  define-environment:
    name: Set environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.define_environment.outputs.env_name }}
    steps:
      - name: Set the environment based on the branch
        id: define_environment
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "env_name=development" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
          fi
      - name: Print the environment
        run: echo "The environment is ${{ steps.define_environment.outputs.env_name }}"

  build:
    runs-on: ubuntu-latest
    needs: define-environment
    environment: ${{ needs.define-environment.outputs.env_name }}

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4
        with:
          sparse-checkout: 'noaa-cpfp-point/'
          sparse-checkout-cone-mode: true
      
      - name: Build for production üîß
        working-directory: ./noaa-cpfp-point
        run: |
          echo PUBLIC_URL="${{ vars.PUBLIC_URL_NOAA }}" >> .env
          echo MAPBOX_ACCESS_TOKEN="${{ secrets.MAP_ACCESS_TOKEN }}" >> .env
          npm i
          npm run production
        env:
          PUBLIC_URL: ${{ vars.PUBLIC_URL_NOAA }}
      
      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: dist_folder
          path: ./noaa-cpfp-point/dist

  deploy-dev:
    needs:
      - build
      - define-environment
    if: github.ref == 'refs/heads/dev'
    environment: ${{ needs.define-environment.outputs.env_name }}

    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist_folder
          path: ./noaa-cpfp-point/dist

      - name: ConfigureAWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::597746869805:role/ghgc-dashboard-role
          role-session-name: ${{ github.repository_owner}}
          aws-region: us-west-2
      
      - name: Upload to S3
        run: |
          export PUBLIC_URL=$(echo ${{ vars.PUBLIC_URL_NOAA }} | sed 's|^https://staging.earth.gov/||')
          aws s3 cp "./noaa-cpfp-point/dist" s3://ghgc-custom-interfaces-develop/${PUBLIC_URL}/ --recursive
          aws s3 sync "./noaa-cpfp-point/flask" s3://ghgc-custom-interfaces-develop/${PUBLIC_URL}/flask/
          aws s3 sync "./noaa-cpfp-point/surface-pfp" s3://ghgc-custom-interfaces-develop/${PUBLIC_URL}/surface-pfp/
        env:
          PUBLIC_URL: ${{ vars.PUBLIC_URL_NOAA }}

  deploy-staging:
    needs:
      - build
      - define-environment
    if: github.ref == 'refs/heads/main'
    environment: ${{ needs.define-environment.outputs.env_name }}
    

    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist_folder
          path: ./noaa-cpfp-point/dist

      - name: ConfigureAWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::944032361616:role/ghgc-dashboard-role
          role-session-name: ${{ github.repository_owner}}
          aws-region: us-west-2
      
      - name: Upload to S3
        run: |
          export PUBLIC_URL=$(echo ${{ vars.PUBLIC_URL_NOAA }} | sed 's|^https://staging.earth.gov/||')
          aws s3 cp "./noaa-cpfp-point/dist" s3://ghgc-custom-interfaces-staging/${PUBLIC_URL}/ --recursive
          aws s3 sync "./noaa-cpfp-point/flask" s3://ghgc-custom-interfaces-staging/${PUBLIC_URL}/flask/
          aws s3 sync "./noaa-cpfp-point/surface-pfp" s3://ghgc-custom-interfaces-staging/${PUBLIC_URL}/surface-pfp/
        env:
          PUBLIC_URL: ${{ vars.PUBLIC_URL_NOAA }}

  deploy-production:
    needs:
      - build
      - define-environment
    if: github.ref == 'refs/heads/production'
    environment: ${{ needs.define-environment.outputs.env_name }}

    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest
    steps:
       
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist_folder
          path: ./noaa-cpfp-point/dist

      - name: ConfigureAWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::761622921697:role/ghgc-dashboard-role
          role-session-name: ${{ github.repository_owner}}
          aws-region: us-west-2
      
      - name: Upload to S3
        run: |
          export PUBLIC_URL=$(echo ${{ vars.PUBLIC_URL_NOAA }} | sed 's|^https://staging.earth.gov/||')
          aws s3 cp "./noaa-cpfp-point/dist" s3://ghgc-custom-interfaces-production/${PUBLIC_URL}/ --recursive
          aws s3 sync "./noaa-cpfp-point/flask" s3://ghgc-custom-interfaces-production/${PUBLIC_URL}/flask/
          aws s3 sync "./noaa-cpfp-point/surface-pfp" s3://ghgc-custom-interfaces-production/${PUBLIC_URL}/surface-pfp/
        env:
          PUBLIC_URL: ${{ vars.PUBLIC_URL_NOAA }}
